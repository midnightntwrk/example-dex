pragma language_version 0.16;
import CompactStandardLibrary;
export {upload_data, selective_disclosure}
export {Maybe}
// Public state: obfuscated personal data keyed by index
export ledger personal_data: Map<Uint<8>, Field>;
// Constructor: Upload personal data from witness into on-chain ledger
constructor upload_data(witness data: Map<Uint<8>, Field>): void {
    // Set the ledger with provided personal data
    personal_data = data;
}
// Request type: Bit array indicating what to disclose
type DisclosureRequest = List<Bool>;
// Return type: Map from data index to Maybe<Field>
type DisclosureResult = Map<Uint<8>, Maybe<Field>>;
// Pure circuit: perform selective disclosure based on request
circuit selective_disclosure(request: DisclosureRequest): DisclosureResult {
    let result: DisclosureResult = map {};
    for (i in 0..request.length) {
        let should_disclose = request.get(i);
        let maybe_value: Maybe<Field>;
        if (should_disclose) {
            let value = personal_data.get(i);
            maybe_value = { is_some: true, value };
        } else {
            maybe_value = { is_some: false };
        }
        result = result.set(i, maybe_value);
    }
    return result;
}